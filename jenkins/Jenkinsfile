pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')        // Docker Hub credentials ID in Jenkins
        KUBECONFIG_CREDENTIALS = credentials('kubeconfig_aws')  // kubeconfig secret file ID in Jenkins
        IMAGE_NAME = "angsdocker/web-app"                       // Docker image name
        APP_NAME = "webapp"                                     // Deployment name from K8s manifest
        KUBE_DEPLOYMENT = "kubernetes/webappv1.yaml"            // K8s deployment manifest path in repo
    }

    stages {

        // --------------------------
        // CHECKOUT
        // --------------------------
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/angsgit/devops_home_lab.git'
            }
        }

        // --------------------------
        // BUILD DOCKER IMAGE
        // --------------------------
        stage('Build Docker Image') {
            steps {
                sh 'docker build -t $IMAGE_NAME:$BUILD_NUMBER -f app/Dockerfile app'
            }
        }

        // --------------------------
        // PUSH TO DOCKER HUB
        // --------------------------
        stage('Push to Docker Hub') {
            steps {
                sh '''
                    echo "$DOCKERHUB_CREDENTIALS_PSW" | docker login -u "$DOCKERHUB_CREDENTIALS_USR" --password-stdin
                    docker push $IMAGE_NAME:$BUILD_NUMBER
                    docker tag $IMAGE_NAME:$BUILD_NUMBER $IMAGE_NAME:latest
                    docker push $IMAGE_NAME:latest
                '''
            }
        }

        // --------------------------
        // DEPLOY TO KUBERNETES
        // --------------------------
        stage('Deploy to Kubernetes') {
            steps {
                withEnv(["KUBECONFIG=${KUBECONFIG_CREDENTIALS}"]) {
                    sh '''
                        echo "üåç Fetching master IP from Terraform..."
                        terraform -chdir=IaC init -input=false -backend=false >/dev/null
                        MASTER_IP=$(terraform -chdir=IaC output -raw master_public_ip)

                        if [ -z "$MASTER_IP" ]; then
                            echo "‚ùå ERROR: Could not fetch master IP from Terraform output."
                            exit 1
                        fi

                        echo "üîß Updating kubeconfig with master IP: $MASTER_IP"
                        sed -i "s|server: https://.*:6443|server: https://$MASTER_IP:6443|g" $KUBECONFIG

                        echo "üîç Verifying cluster connectivity..."
                        kubectl cluster-info || { echo "‚ùå ERROR: Could not connect to cluster at $MASTER_IP"; exit 1; }

                        echo "üöÄ Deploying to Kubernetes..."
                        kubectl get ns app-v1 || kubectl create ns app-v1
                        sed -i "s|image: .*|image: $IMAGE_NAME:$BUILD_NUMBER|g" $KUBE_DEPLOYMENT
                        kubectl apply -f $KUBE_DEPLOYMENT -n app-v1
                        kubectl rollout status deployment/$APP_NAME -n app-v1

                        echo "üìà Applying monitoring configs..."
                        kubectl apply -f monitoring/prometheus/flaskapp-servicemonitor.yaml -n monitoring
                    '''
                }
            }
        }
    }

    // --------------------------
    // POST ACTIONS
    // --------------------------
    post {
        success {
            echo "‚úÖ Deployment successful!"
        }
        failure {
            echo "‚ùå Deployment failed!"
        }
    }
}
