---
- name: Deploy Flask app to Kubernetes
  hosts: master
  become: yes
  vars:
    app_name: webapp
    namespace_name: "{{ namespace_name | default('app-v1') }}"
    image_name: "{{ image_name | default('angsdocker/web-app:latest') }}"
    manifest_dir: /home/ubuntu/kubernetes

  tasks:
    - name: Ensure namespace exists
      shell: |
        kubectl --kubeconfig /etc/kubernetes/admin.conf get ns {{ namespace_name }} || \
        kubectl --kubeconfig /etc/kubernetes/admin.conf create ns {{ namespace_name }}

    - name: Copy Kubernetes manifests
      copy:
        src: "{{ playbook_dir }}/../../kubernetes/"
        dest: "{{ manifest_dir }}"
        owner: ubuntu
        mode: '0644'

    - name: Update image in manifest
      shell: |
        sed -i "s|image: .*|image: {{ image_name }}|g" {{ manifest_dir }}/webappv1.yaml

    - name: Apply deployment and service
      shell: |
        kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f {{ manifest_dir }}/webappv1.yaml -n {{ namespace_name }}

    - name: Wait for rollout
      shell: |
        kubectl --kubeconfig /etc/kubernetes/admin.conf rollout status deployment/{{ app_name }} -n {{ namespace_name }} --timeout=120s

      # ‚úÖ Ensure NGINX Ingress Controller is installed
    - name: Install NGINX Ingress Controller if missing
      shell: |
        if ! kubectl --kubeconfig /etc/kubernetes/admin.conf get ns ingress-nginx >/dev/null 2>&1; then
          echo "üöÄ Installing ingress-nginx controller..."
          kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml
          echo "‚è≥ Waiting for ingress controller pods to be ready..."
          sleep 60
        else
          echo "‚úÖ Ingress controller already installed."
        fi

# ‚úÖ Ensure Ingress Controller uses NodePort (avoid AWS LoadBalancer charges)
    - name: Patch ingress-nginx-controller to NodePort
      shell: |
        kubectl --kubeconfig /etc/kubernetes/admin.conf patch svc ingress-nginx-controller \
          -n ingress-nginx -p '{"spec": {"type": "NodePort"}}'
      args:
        warn: false
      register: patch_result
      failed_when: patch_result.rc not in [0, 1]
      changed_when: "'patched' in patch_result.stdout or patch_result.rc == 0"

    # üßæ Verify service type
    - name: Verify ingress-nginx service type
      shell: |
        kubectl --kubeconfig /etc/kubernetes/admin.conf get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.spec.type}'
      register: svc_type
      changed_when: false
      
    - debug:
        msg: "Ingress controller type confirmed as: {{ svc_type.stdout }}"


    # ‚úÖ Get Ingress Controller NodePort instead of waiting for external IP
    - name: Get NodePort of ingress controller
      shell: |
        kubectl --kubeconfig /etc/kubernetes/admin.conf get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.spec.ports[?(@.port==80)].nodePort}'
      register: ingress_nodeport

    - name: Get public worker IP
      shell: |
        kubectl --kubeconfig /etc/kubernetes/admin.conf get nodes -o wide | grep worker | awk '{print $6}' | head -n1
      register: worker_ip

    - name: Get ingress hostname (if defined)
      shell: |
        kubectl --kubeconfig /etc/kubernetes/admin.conf get ingress webapp -n {{ namespace_name }} -o jsonpath='{.spec.rules[0].host}'
      register: ingress_host
      ignore_errors: true

    - name: Show final access URL
      debug:
        msg: |
          üåê Access your app at: http://{{ worker_ip.stdout }}:{{ ingress_nodeport.stdout }}/ 
          (Ingress Host: {{ ingress_host.stdout | default('none') }})
