---
- name: Install Kubernetes components on AWS EC2
  hosts: all
  become: yes
  tasks:

    - name: Disable swap (required for Kubernetes)
      command: swapoff -a
      when: ansible_swaptotal_mb > 0
      ignore_errors: true

    - name: Ensure swap is disabled permanently
      replace:
        path: /etc/fstab
        regexp: '(^.*swap.*$)'
        replace: '# \1'
      ignore_errors: true

    - name: Load required kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter

    - name: Set up sysctl params for Kubernetes networking
      copy:
        dest: /etc/sysctl.d/kubernetes.conf
        content: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1

    - name: Apply sysctl params
      command: sysctl --system

    - name: Install dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gpg
          - git
          - golang-go
          - make
        state: present
        update_cache: yes

    # --- Install cri-dockerd (Docker runtime for Kubernetes) ---
    - name: Clone cri-dockerd repo
      git:
        repo: https://github.com/Mirantis/cri-dockerd.git
        dest: /tmp/cri-dockerd
        version: master

    - name: Build and install cri-dockerd
      shell: |
        cd /tmp/cri-dockerd
        mkdir -p /usr/local/bin
        make
        install -o root -g root -m 0755 cri-dockerd /usr/local/bin/
      args:
        creates: /usr/local/bin/cri-dockerd

    - name: Set up systemd service for cri-dockerd
      copy:
        dest: /etc/systemd/system/cri-docker.service
        content: |
          [Unit]
          Description=CRI Interface for Docker Application Container Engine
          Documentation=https://docs.mirantis.com
          After=network-online.target firewalld.service docker.service
          Wants=network-online.target
          Requires=docker.socket

          [Service]
          Type=notify
          ExecStart=/usr/local/bin/cri-dockerd --container-runtime-endpoint fd://
          ExecReload=/bin/kill -s HUP $MAINPID
          Restart=always
          RestartSec=10s
          TimeoutStartSec=0

          [Install]
          WantedBy=multi-user.target
        mode: '0644'

    - name: Set up socket activation for cri-dockerd
      copy:
        dest: /etc/systemd/system/cri-docker.socket
        content: |
          [Unit]
          Description=CRI Docker Socket for the API
          PartOf=cri-docker.service

          [Socket]
          ListenStream=/var/run/cri-dockerd.sock
          SocketMode=0660
          SocketUser=root
          SocketGroup=docker

          [Install]
          WantedBy=sockets.target
        mode: '0644'

    - name: Enable and start cri-dockerd
      shell: |
        systemctl daemon-reload
        systemctl enable cri-docker.service
        systemctl enable --now cri-docker.socket

    - name: Add Kubernetes apt key (modern method)
      shell: |
        mkdir -p /etc/apt/keyrings
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes apt repository (modern method)
      copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /"

    - name: Update apt cache after adding Kubernetes repo
      apt:
        update_cache: yes

    - name: Install kubelet, kubeadm, and kubectl
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present

    - name: Hold Kubernetes package versions
      command: apt-mark hold kubelet kubeadm kubectl

    - name: Enable and start kubelet service
      service:
        name: kubelet
        enabled: yes
        state: started

    - name: Verify kubeadm installation
      command: kubeadm version -o short
      register: kubeadm_version
      ignore_errors: true

    - name: Verify kubectl installation
      command: kubectl version --client
      register: kubectl_version
      ignore_errors: true

    - name: Print versions
      debug:
        msg:
          - "kubeadm version: {{ kubeadm_version.stdout | default('not found') }}"
          - "kubectl version: {{ kubectl_version.stdout | default('not found') }}"


# --- Initialize Master Node ---
- hosts: master
  become: yes
  tasks:
    - name: Initialize Kubernetes master
      command: kubeadm init --pod-network-cidr=10.244.0.0/16 --cri-socket unix:///var/run/cri-dockerd.sock
      register: kubeadm_init
      args:
        creates: /etc/kubernetes/admin.conf

    - name: Create .kube directory for ubuntu user
      file:
        path: /home/ubuntu/.kube
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Copy kubeconfig to ubuntu user
      command: cp /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
      args:
        creates: /home/ubuntu/.kube/config

    - name: Change ownership of kubeconfig
      file:
        path: /home/ubuntu/.kube/config
        owner: ubuntu
        group: ubuntu
        mode: '0644'

    - name: Install Flannel CNI network
      shell: |
        su - ubuntu -c "kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml"
      args:
        warn: false

    - name: Get join command from master
      shell: kubeadm token create --print-join-command
      register: join_cmd

    - name: Save join command to file
      copy:
        content: "{{ join_cmd.stdout }}"
        dest: /tmp/join-command.sh
        mode: '0755'

    - name: Fetch join command to local machine
      fetch:
        src: /tmp/join-command.sh
        dest: /tmp/join-command.sh
        flat: yes


# --- Join Worker Nodes ---
- hosts: workers
  become: yes
  tasks:
    - name: Copy join command to workers
      copy:
        src: /tmp/join-command.sh
        dest: /tmp/join-command.sh
        mode: '0755'

    - name: Join worker nodes to cluster
      command: sh /tmp/join-command.sh
      args:
        creates: /etc/kubernetes/kubelet.conf
