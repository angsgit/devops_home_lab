---
- name: Install Kubernetes components on AWS EC2
  hosts: all
  become: yes
  tasks:

    - name: Disable swap (required for Kubernetes)
      command: swapoff -a
      when: ansible_swaptotal_mb > 0
      ignore_errors: true

    - name: Ensure swap is disabled permanently
      replace:
        path: /etc/fstab
        regexp: '(^.*swap.*$)'
        replace: '# \1'
      ignore_errors: true

    - name: Load required kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter

    - name: Set up sysctl params for Kubernetes networking
      copy:
        dest: /etc/sysctl.d/kubernetes.conf
        content: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1

    - name: Apply sysctl params
      command: sysctl --system

    - name: Install dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gpg
        state: present
        update_cache: yes

    - name: Add Kubernetes apt key (modern method)
      shell: |
        mkdir -p /etc/apt/keyrings
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes apt repository (modern method)
      copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /"

    - name: Update apt cache after adding Kubernetes repo
      apt:
        update_cache: yes
    # ðŸ‘† ensures apt knows about the new repo

    - name: Install kubelet, kubeadm, and kubectl
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present

    - name: Hold Kubernetes package versions
      command: apt-mark hold kubelet kubeadm kubectl

    - name: Enable and start kubelet service
      service:
        name: kubelet
        enabled: yes
        state: started

    - name: Verify kubeadm installation
      command: kubeadm version -o short
      register: kubeadm_version
      ignore_errors: true

    - name: Verify kubectl installation
      command: kubectl version --client --short
      register: kubectl_version
      ignore_errors: true

    - name: Print versions
      debug:
        msg:
          - "kubeadm version: {{ kubeadm_version.stdout | default('not found') }}"
          - "kubectl version: {{ kubectl_version.stdout | default('not found') }}"

# --- Initialize Master Node ---

- name: Initialize Kubernetes master
  hosts: master
  become: yes
  command: kubeadm init --pod-network-cidr=10.244.0.0/16
  register: kubeadm_init
  args:
    creates: /etc/kubernetes/admin.conf  # prevents re-init if rerun

- name: Create .kube directory for ubuntu user
  hosts: master
  become: yes
  file:
    path: /home/ubuntu/.kube
    state: directory
    owner: ubuntu
    group: ubuntu
    mode: '0755'

- name: Copy kubeconfig to ubuntu user
  hosts: master
  become: yes
  command: >
    cp /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
  args:
    creates: /home/ubuntu/.kube/config

- name: Change ownership of kubeconfig
  hosts: master
  become: yes
  file:
    path: /home/ubuntu/.kube/config
    owner: ubuntu
    group: ubuntu
    mode: '0644'

- name: Install Flannel CNI network
  hosts: master
  become: yes
  shell: |
    su - ubuntu -c "kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml"
  args:
    warn: false

# --- Generate and fetch join command ---
- name: Get join command from master
  hosts: master
  become: yes
  shell: kubeadm token create --print-join-command
  register: join_cmd

- name: Save join command to file
  hosts: master
  become: yes
  copy:
    content: "{{ join_cmd.stdout }}"
    dest: /tmp/join-command.sh
    mode: '0755'

- name: Fetch join command to local machine
  hosts: master
  become: yes
  fetch:
    src: /tmp/join-command.sh
    dest: /tmp/join-command.sh
    flat: yes

# --- Join Worker Nodes ---
- name: Copy join command to workers
  hosts: workers
  become: yes
  copy:
    src: /tmp/join-command.sh
    dest: /tmp/join-command.sh
    mode: '0755'

- name: Join worker nodes to cluster
  hosts: workers
  become: yes
  command: sh /tmp/join-command.sh
  args:
    creates: /etc/kubernetes/kubelet.conf
