pipeline {
    agent any

    parameters {
        string(name: 'IMAGE_TAG', defaultValue: 'latest', description: 'Docker image tag to deploy (e.g. latest or build number)')
        string(name: 'APP_NAMESPACE', defaultValue: 'app-v1', description: 'Kubernetes namespace to deploy the app')
    }

    environment {
        ANSIBLE_SSH_KEY = credentials('aws-ssh-key')
    }

    stages {

        // --------------------------
        // TOOL SETUP
        // --------------------------
        stage('Setup Tools') {
            steps {
                sh '''
                    echo "üîß Checking and installing Ansible and kubectl..."

                    if ! command -v ansible >/dev/null 2>&1; then
                        echo "üöÄ Installing Ansible..."
                        sudo apt update -y && sudo apt install -y ansible
                    fi

                    if ! command -v kubectl >/dev/null 2>&1; then
                        echo "üöÄ Installing kubectl..."
                        curl -LO "https://dl.k8s.io/release/$(curl -sL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
                    fi
                '''
            }
        }

        // --------------------------
        // CHECKOUT CODE
        // --------------------------
        stage('Checkout Code') {
            steps {
                git branch: 'master', url: 'https://github.com/angsgit/devops_home_lab.git'
            }
        }

        // --------------------------
        // GENERATE INVENTORY
        // --------------------------
        stage('Generate Inventory') {
        steps {
            dir('IaC/ansible') {
                sh '''
                    echo "üì¶ Copying Terraform state file from infra pipeline workspace..."
                    cp /var/lib/jenkins/workspace/IaC-Homelab/IaC/terraform/terraform.tfstate ../terraform/terraform.tfstate || {
                        echo "‚ùå ERROR: Could not copy terraform.tfstate from IaC-Homelab workspace."
                        exit 1
                    }

                    echo "‚úÖ Copied terraform.tfstate successfully."

                    echo "üîç Generating Ansible inventory from Terraform outputs..."
                    MASTER_IP=$(terraform -chdir=../terraform output -raw master_public_ip 2>/dev/null || true)
                    WORKER1_IP=$(terraform -chdir=../terraform output -raw worker1_public_ip 2>/dev/null || true)
                    WORKER2_IP=$(terraform -chdir=../terraform output -raw worker2_public_ip 2>/dev/null || true)

                    if [ -z "$MASTER_IP" ]; then
                        echo "‚ùå ERROR: master_public_ip is empty ‚Äî Terraform state or outputs are missing."
                        exit 1
                    fi

                    echo "[master]" > inventory.ini
                    echo "$MASTER_IP ansible_user=ubuntu ansible_ssh_private_key_file=$ANSIBLE_SSH_KEY" >> inventory.ini
                    echo "" >> inventory.ini
                    echo "[workers]" >> inventory.ini
                    [ -n "$WORKER1_IP" ] && echo "$WORKER1_IP ansible_user=ubuntu ansible_ssh_private_key_file=$ANSIBLE_SSH_KEY" >> inventory.ini
                    [ -n "$WORKER2_IP" ] && echo "$WORKER2_IP ansible_user=ubuntu ansible_ssh_private_key_file=$ANSIBLE_SSH_KEY" >> inventory.ini

                    echo "‚úÖ Inventory created:"
                    cat inventory.ini
                '''
            }
    }
    }

        // --------------------------
        // DEPLOY APP TO K8S VIA ANSIBLE
        // --------------------------
        stage('Deploy App via Ansible') {
            steps {
                dir('IaC/ansible') {
                    withCredentials([sshUserPrivateKey(credentialsId: 'aws-ssh-key', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
                        sh '''
                            export ANSIBLE_HOST_KEY_CHECKING=False
                            echo "üöÄ Running Ansible playbook to deploy Flask app to Kubernetes..."
                            ansible-playbook -i inventory.ini deploy_k8s_app.yml \
                                --extra-vars "image_name=angsdocker/web-app:latest namespace_name=app-v1" \
                                --key-file $SSH_KEY
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Flask app deployed successfully to Kubernetes!"
        }
        failure {
            echo "‚ùå Deployment failed! Check Ansible logs for details."
        }
    }
}
