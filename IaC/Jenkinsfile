pipeline {
    agent any

    parameters {
        booleanParam(
            name: 'DESTROY_INFRA',
            defaultValue: false,
            description: 'Check to destroy all infrastructure instead of creating it'
        )
    }

    environment {
        AWS_REGION = "eu-west-1"
        AWS_CREDENTIALS = credentials('aws-creds')
        ANSIBLE_SSH_KEY = credentials('aws-ssh-key')
    }

    stages {

        // --------------------------
        // TOOL SETUP (Runs only if missing)
        // --------------------------
        stage('Setup Tools') {
            steps {
                sh '''
                    echo "üîß Checking and installing required tools..."

                    # Terraform check and install
                    if ! command -v terraform >/dev/null 2>&1; then
                        echo "üöÄ Installing Terraform..."
                        sudo apt update -y && sudo apt install -y unzip wget
                        wget -q https://releases.hashicorp.com/terraform/1.10.3/terraform_1.10.3_linux_amd64.zip
                        unzip terraform_1.10.3_linux_amd64.zip
                        sudo mv terraform /usr/local/bin/
                        rm -f terraform_1.10.3_linux_amd64.zip
                        echo "‚úÖ Terraform installed successfully."
                    else
                        echo "‚úÖ Terraform already installed: $(terraform -version | head -n 1)"
                    fi

                    # Ansible check and install
                    if ! command -v ansible >/dev/null 2>&1; then
                        echo "üöÄ Installing Ansible..."
                        sudo apt update -y && sudo apt install -y ansible
                        echo "‚úÖ Ansible installed successfully."
                    else
                        echo "‚úÖ Ansible already installed: $(ansible --version | head -n 1)"
                    fi

                    # Netcat for SSH check
                    if ! command -v nc >/dev/null 2>&1; then
                        sudo apt install -y netcat
                    fi
                '''
            }
        }

        // --------------------------
        // CHECKOUT CODE
        // --------------------------
        stage('Checkout Code') {
            steps {
                git branch: 'master', url: 'https://github.com/angsgit/devops_home_lab.git'
            }
        }

        // --------------------------
        // TERRAFORM APPLY (Only if NOT destroying)
        // --------------------------
        stage('Terraform Init & Apply') {
            when {
                expression { return params.DESTROY_INFRA == false }
            }
            steps {
                dir('IaC/terraform') {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds']]) {
                        sh '''
                            terraform init
                            terraform apply -auto-approve
                            terraform output -raw ec2_public_ip > ../ansible/host_ip.txt
                        '''
                    }
                }
            }
        }

        // --------------------------
        // WAIT FOR SSH (Only if NOT destroying)
        // --------------------------
        stage('Wait for EC2 SSH Ready') {
            when {
                expression { return params.DESTROY_INFRA == false }
            }
            steps {
                dir('IaC/ansible') {
                    sh '''
                        IP=$(cat host_ip.txt)
                        echo "‚è≥ Waiting for EC2 ($IP) SSH to become available..."
                        for i in {1..20}; do
                            if nc -zv $IP 22 >/dev/null 2>&1; then
                                echo "‚úÖ SSH is ready!"
                                exit 0
                            fi
                            echo "Still waiting... ($i)"
                            sleep 10
                        done
                        echo "‚ùå Timeout waiting for SSH on $IP"
                        exit 1
                    '''
                }
            }
        }

        // --------------------------
        // CONFIGURE WITH ANSIBLE (Only if NOT destroying)
        // --------------------------
        stage('Configure with Ansible') {
            when {
                expression { return params.DESTROY_INFRA == false }
            }
            steps {
                dir('IaC/ansible') {
                    withCredentials([sshUserPrivateKey(credentialsId: 'aws-ssh-key', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
                        sh '''
                            export ANSIBLE_HOST_KEY_CHECKING=False
                            IP=$(cat host_ip.txt)
                            echo "[aws]" > inventory.ini
                            echo "$IP ansible_user=ubuntu ansible_ssh_private_key_file=$SSH_KEY" >> inventory.ini
                            ansible -i inventory.ini aws -m ping
                            ansible-playbook -i inventory.ini install_docker.yml
                            ansible-playbook -i inventory.ini install_kubernetes.yml
                        '''
                    }
                }
            }
        }

        // --------------------------
        // DESTROY INFRASTRUCTURE
        // --------------------------
        stage('Destroy Infrastructure') {
            when {
                expression { return params.DESTROY_INFRA == true }
            }
            steps {
                dir('IaC/terraform') {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds']]) {
                        sh '''
                            echo "üßπ Destroying AWS infrastructure..."
                            terraform destroy -auto-approve
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Pipeline completed successfully!'
        }
        failure {
            echo '‚ùå Something went wrong ‚Äî check the logs.'
        }
    }
}
